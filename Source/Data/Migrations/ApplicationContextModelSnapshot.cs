// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Splatrika.MetroNavigator.Source.Data;

#nullable disable

namespace Source.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.DurationFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DurationFactor");

                    b.HasDiscriminator<string>("Type").HasValue("DurationFactor");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Railway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DurationId")
                        .HasColumnType("int");

                    b.Property<int>("FromId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("ToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("FromId");

                    b.HasIndex("MapId");

                    b.HasIndex("ToId");

                    b.ToTable("Railways", (string)null);
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("MapId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DurationId")
                        .HasColumnType("int");

                    b.Property<int>("FromId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("ToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("FromId");

                    b.HasIndex("MapId");

                    b.HasIndex("ToId");

                    b.ToTable("Transfer", (string)null);
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.LineAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("MapAppearanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("MapAppearanceId");

                    b.ToTable("LineAppearance");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.MapAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId")
                        .IsUnique();

                    b.ToTable("MapAppearance");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.RailwayAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MapAppearanceId")
                        .HasColumnType("int");

                    b.Property<string>("Points")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RailwayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapAppearanceId");

                    b.HasIndex("RailwayId");

                    b.ToTable("RailwayAppearances");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.StationAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MapAppearanceId")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapAppearanceId");

                    b.HasIndex("StationId");

                    b.ToTable("StationAppearance");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.StaticDuration", b =>
                {
                    b.HasBaseType("Splatrika.MetroNavigator.Source.Entities.MapAggregate.DurationFactor");

                    b.Property<float>("StaticSeconds")
                        .HasColumnType("real")
                        .HasColumnName("Seconds");

                    b.HasDiscriminator().HasValue("StaticDuration");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Line", b =>
                {
                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Map", null)
                        .WithMany("Lines")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Railway", b =>
                {
                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.DurationFactor", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Station", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Map", null)
                        .WithMany("Railways")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Station", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Station", b =>
                {
                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Map", null)
                        .WithMany("Stations")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Transfer", b =>
                {
                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.DurationFactor", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Station", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Map", null)
                        .WithMany("Transfers")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Station", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.LineAppearance", b =>
                {
                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.MapAppearance", null)
                        .WithMany("Lines")
                        .HasForeignKey("MapAppearanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Splatrika.MetroNavigator.Source.Entities.Color", "Color", b1 =>
                        {
                            b1.Property<int>("LineAppearanceId")
                                .HasColumnType("int");

                            b1.Property<float>("Alpha")
                                .HasColumnType("real");

                            b1.Property<float>("Blue")
                                .HasColumnType("real");

                            b1.Property<float>("Green")
                                .HasColumnType("real");

                            b1.Property<float>("Red")
                                .HasColumnType("real");

                            b1.HasKey("LineAppearanceId");

                            b1.ToTable("LineAppearance");

                            b1.WithOwner()
                                .HasForeignKey("LineAppearanceId");
                        });

                    b.Navigation("Color")
                        .IsRequired();
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.RailwayAppearance", b =>
                {
                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.MapAppearance", null)
                        .WithMany("Railways")
                        .HasForeignKey("MapAppearanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.StationAppearance", b =>
                {
                    b.HasOne("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.MapAppearance", null)
                        .WithMany("Stations")
                        .HasForeignKey("MapAppearanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.Caption", "Caption", b1 =>
                        {
                            b1.Property<int>("StationAppearanceId")
                                .HasColumnType("int");

                            b1.Property<string>("TextAligin")
                                .IsRequired()
                                .HasColumnType("nvarchar(10)");

                            b1.HasKey("StationAppearanceId");

                            b1.ToTable("StationAppearance");

                            b1.WithOwner()
                                .HasForeignKey("StationAppearanceId");

                            b1.OwnsOne("Splatrika.MetroNavigator.Source.Entities.Position", "Offset", b2 =>
                                {
                                    b2.Property<int>("CaptionStationAppearanceId")
                                        .HasColumnType("int");

                                    b2.Property<float>("Left")
                                        .HasColumnType("real");

                                    b2.Property<float>("Top")
                                        .HasColumnType("real");

                                    b2.HasKey("CaptionStationAppearanceId");

                                    b2.ToTable("StationAppearance");

                                    b2.WithOwner()
                                        .HasForeignKey("CaptionStationAppearanceId");
                                });

                            b1.Navigation("Offset")
                                .IsRequired();
                        });

                    b.OwnsOne("Splatrika.MetroNavigator.Source.Entities.Position", "Position", b1 =>
                        {
                            b1.Property<int>("StationAppearanceId")
                                .HasColumnType("int");

                            b1.Property<float>("Left")
                                .HasColumnType("real");

                            b1.Property<float>("Top")
                                .HasColumnType("real");

                            b1.HasKey("StationAppearanceId");

                            b1.ToTable("StationAppearance");

                            b1.WithOwner()
                                .HasForeignKey("StationAppearanceId");
                        });

                    b.Navigation("Caption")
                        .IsRequired();

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAggregate.Map", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Railways");

                    b.Navigation("Stations");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Splatrika.MetroNavigator.Source.Entities.MapAppearanceAggregate.MapAppearance", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Railways");

                    b.Navigation("Stations");
                });
#pragma warning restore 612, 618
        }
    }
}
